(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[748],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(f,o(o({ref:e},u),{},{components:n})):a.createElement(f,o({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4091:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:3},l="Syntax Basics",c={unversionedId:"Syntax Basics",id:"Syntax Basics",isDocsHomePage:!1,title:"Syntax Basics",description:"This is an overview of basic syntax for unit testing in Angular. More information can be found in the Jasmine Docs.",source:"@site/docs/Syntax Basics.md",sourceDirName:".",slug:"/Syntax Basics",permalink:"/angularUnitTesting/docs/Syntax Basics",editUrl:"https://github.com/natalyjazzviolin/angularUnitTesting/blob/main/docs/Syntax Basics.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Setup & Best Practices",permalink:"/angularUnitTesting/docs/setup"},next:{title:"Isolated Unit Tests",permalink:"/angularUnitTesting/docs/isolated-unit-tests"}},u=[{value:"Basic Functions",id:"basic-functions",children:[{value:"describe( string, function )",id:"describe-string-function-",children:[]},{value:"beforeEach( function )",id:"beforeeach-function-",children:[]},{value:"it( string, function )",id:"it-string-function-",children:[]},{value:"expect( actual )",id:"expect-actual-",children:[]}]},{value:"Matchers",id:"matchers",children:[]}],p={toc:u};function d(t){var e=t.components,n=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"syntax-basics"},"Syntax Basics"),(0,i.kt)("p",null,"This is an overview of basic syntax for unit testing in Angular. More information can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://jasmine.github.io/2.0/introduction"},"Jasmine Docs"),"."),(0,i.kt)("h2",{id:"basic-functions"},"Basic Functions"),(0,i.kt)("p",null,"The main functions are ",(0,i.kt)("inlineCode",{parentName:"p"},"describe()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"beforeEach()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"it()"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"expect()")," ."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"describe() is a wrapper around all other funcitons."),(0,i.kt)("li",{parentName:"ul"},"beforeEach() runs any basic setup before each test is conducted."),(0,i.kt)("li",{parentName:"ul"},"it() conducts the test"),(0,i.kt)("li",{parentName:"ul"},"expect() sets the expectations and returns a boolean value of pass or fail.")),(0,i.kt)("h3",{id:"describe-string-function-"},"describe( string, function )"),(0,i.kt)("p",null,"This is a Jasmine function that allows us to group tests together.\nIt takes two parameters - a string, and a callback function that contains all other functions within itself."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('ComponentName', () => {\n    // Everything else\n})\n")),(0,i.kt)("h3",{id:"beforeeach-function-"},"beforeEach( function )"),(0,i.kt)("p",null,"This function runs before each test. Less important setup  for the initial state should be moved in here. More critical setup should be in ",(0,i.kt)("inlineCode",{parentName:"p"},"it()"),". It takes one parameter - a callback funciton."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"beforeEach(() => {\n    // Reset the component, etc.\n    MyComponent = {};\n})\n")),(0,i.kt)("h3",{id:"it-string-function-"},"it( string, function )"),(0,i.kt)("p",null,"This function should contain the complete test story - someone reading the code should be able to look at this and understand what's going on without jumping around to other code blocks. Make sure to include ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/docs/setup#tests-as-stories--their-structure"},"Arrange, Act, Assert")," within this function."),(0,i.kt)("p",null,"The convention is to start the string with 'should' to make printed messages more readable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"it(('should be true if true') => {\n    // Arrange\n    MyComponent.property = false;\n\n    //Act\n    MyComponent.property = true;\n\n    // Assert\n    expect(MyComponent.property).toBe(true);\n})\n")),(0,i.kt)("p",null,"On test completion prints: My component should be true if true."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"To skip a test change ",(0,i.kt)("inlineCode",{parentName:"p"},"it()")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"xit()")))),(0,i.kt)("h3",{id:"expect-actual-"},"expect( actual )"),(0,i.kt)("p",null,"Expect functions take a value called an actual. Typically used alongside a matcher function. Together they return a boolean value that depicts the passing or failing of a spec."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(doSomething).toEqual('expected result');\n")),(0,i.kt)("h2",{id:"matchers"},"Matchers"),(0,i.kt)("p",null,"Matchers are built-in functions in Jasmine that implement a boolean comparison between the actual value and the expected value."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Keyword"),(0,i.kt)("th",{parentName:"tr",align:null},"Action"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toEqual()"),(0,i.kt)("td",{parentName:"tr",align:null},"test for equality, uses property equivalence. Recommended for primitives.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toBe()"),(0,i.kt)("td",{parentName:"tr",align:null},"test for identity, uses strict equality ( === )")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toBeNull()"),(0,i.kt)("td",{parentName:"tr",align:null},"tests if ",(0,i.kt)("inlineCode",{parentName:"td"},"null"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toBeUndefined() and toBeDefined()"),(0,i.kt)("td",{parentName:"tr",align:null},"tests if ",(0,i.kt)("inlineCode",{parentName:"td"},"undefined")," or not")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toBeNaN()"),(0,i.kt)("td",{parentName:"tr",align:null},"tests if ",(0,i.kt)("inlineCode",{parentName:"td"},"NaN"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"toBeFalsy() and toBeTruthy()"),(0,i.kt)("td",{parentName:"tr",align:null},"test for falseness/truthfulness")))))}d.isMDXComponent=!0}}]);