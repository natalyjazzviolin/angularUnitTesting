(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[56],{4442:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return r},metadata:function(){return l},toc:function(){return d},default:function(){return u}});var i=n(2122),s=n(9756),a=(n(7294),n(3905)),o=["components"],c={sidebar_position:4},r="Isolated Unit Tests",l={unversionedId:"isolated-unit-tests",id:"isolated-unit-tests",isDocsHomePage:!1,title:"Isolated Unit Tests",description:"Isolated unit tests check an instance of a class without using any dependencies or injected values. A component is a class, so this type of test is conducted on a single component.",source:"@site/docs/isolated-unit-tests.md",sourceDirName:".",slug:"/isolated-unit-tests",permalink:"/angularUnitTesting/docs/isolated-unit-tests",editUrl:"https://github.com/natalyjazzviolin/angularUnitTesting/blob/main/docs/isolated-unit-tests.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Syntax Basics",permalink:"/angularUnitTesting/docs/Syntax Basics"},next:{title:"Shallow Integration Test Basics",permalink:"/angularUnitTesting/docs/Shallow Integration Tests/shallow-integration-basics"}},d=[{value:"Testing a Pipe",id:"testing-a-pipe",children:[]},{value:"Testing a Service",id:"testing-a-service",children:[]},{value:"Testing a Component with a Mock Service",id:"testing-a-component-with-a-mock-service",children:[]},{value:"Testing Interactions",id:"testing-interactions",children:[]}],p={toc:d};function u(e){var t=e.components,n=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"isolated-unit-tests"},"Isolated Unit Tests"),(0,a.kt)("p",null,"Isolated unit tests check an instance of a class without using any dependencies or injected values. A component is a class, so this type of test is conducted on a single component."),(0,a.kt)("h2",{id:"testing-a-pipe"},"Testing a Pipe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('PipeName', () => {\n\n    it('should display this if that', () => {\n        let pipe = new PipeName();\n\n        expect(pipe.doSomething).toEqual('expected value');\n    })\n})\n")),(0,a.kt)("h2",{id:"testing-a-service"},"Testing a Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('ServiceName', () => {\n    let service: TypeOfService;\n\n    // Make sure there is a new service before each test\n    beforeEach(() => {\n        service = new TypeOfService();\n    })\n\n    it('should perform this service', () => {\n\n        expect(service.property.method).toBe(expected value);\n    })\n\n})\n")),(0,a.kt)("h2",{id:"testing-a-component-with-a-mock-service"},"Testing a Component with a Mock Service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"describe('MyComponent', () => {\n    let component: MyComponent;\n    let DATA;\n\n    // Define mock service\n    let mockService;\n\n    beforeEach(() => {\n        DATA = [\n            {id:1, section:'violin_one', contracted: 'true'},\n            {id:2, section:'violin_two', contracted: 'false'},\n            {id:3, section:'viola', contracted: 'false'},\n            {id:4, section:'cello', contracted: 'true'}\n        ]\n\n        // Initialize mock service with a delete method\n        mockService = jasmine.createSpyObj(['delete'])\n\n        component = new MyComponent(mockService);\n    })\n\n    // Nested describe for service method\n    describe('delete', () => {\n        mockService.delete.and.returnValue(of(expected value))\n        component.dataArr = DATA;\n\n        component.delete(DATA[2])   ;\n\n        expect(component.dataArr.length).toBe(3);\n    })\n})\n")),(0,a.kt)("h2",{id:"testing-interactions"},"Testing Interactions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// Within a describe function for component\nit('should call this method', () => {\n    mockService.delete.and.returnValue(of(expected value))\n        component.dataArr = DATA;\n\n        component.delete(DATA[2])   ;\n\n        expect(mockService.delete).toHaveBeenCalled();\n})\n")))}u.isMDXComponent=!0}}]);