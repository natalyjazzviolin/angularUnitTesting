(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[179],{2763:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var i=n(2122),o=n(9756),r=(n(7294),n(3905)),a=["components"],s={sidebar_position:6},l="Deep Integration Basics",c={unversionedId:"deep-integration-test-tutorial",id:"deep-integration-test-tutorial",isDocsHomePage:!1,title:"Deep Integration Basics",description:"Use real child components",source:"@site/docs/deep-integration-test-tutorial.md",sourceDirName:".",slug:"/deep-integration-test-tutorial",permalink:"/angularUnitTesting/docs/deep-integration-test-tutorial",editUrl:"https://github.com/natalyjazzviolin/angularUnitTesting/blob/main/docs/deep-integration-test-tutorial.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Shallow Integration Basics",permalink:"/angularUnitTesting/docs/shallow-integration-basics"},next:{title:"Integration Testing Services",permalink:"/angularUnitTesting/docs/integration-testing-services"}},d=[{value:"Use real child components",id:"use-real-child-components",children:[]},{value:"Use mock services",id:"use-mock-services",children:[]},{value:"Avoid template parse errors",id:"avoid-template-parse-errors",children:[]},{value:"Initialize components",id:"initialize-components",children:[]},{value:"Detect Child Element Creation",id:"detect-child-element-creation",children:[{value:"Get all component nodes",id:"get-all-component-nodes",children:[]},{value:"Check if elements are correct",id:"check-if-elements-are-correct",children:[]}]}],p={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deep-integration-basics"},"Deep Integration Basics"),(0,r.kt)("h3",{id:"use-real-child-components"},"Use real child components"),(0,r.kt)("p",null,"In this type of test real child components are used, not mock ones, because we need to test their interaction."),(0,r.kt)("h3",{id:"use-mock-services"},"Use mock services"),(0,r.kt)("p",null,"Keep using mock services, just like in shallow integration tests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"TestBed.configureTestingModule({\n    declarations: [\n        ParentComponent,\n        ChildComponent\n    ],\n    providers: [\n        // Services\n    ]\n})\n\n")),(0,r.kt)("h3",{id:"avoid-template-parse-errors"},"Avoid template parse errors"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"schemas: [NO_ERRORS_SCHEMA]")," to avoid template parse errors. It goes in right after ",(0,r.kt)("inlineCode",{parentName:"p"},"providers"),"."),(0,r.kt)("h3",{id:"initialize-components"},"Initialize components"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"fixture.detectChanges()")," initializes the component and all its children. It also causes the lifecycle hooks to run. Without it, the component is not initialized."),(0,r.kt)("h2",{id:"detect-child-element-creation"},"Detect Child Element Creation"),(0,r.kt)("h3",{id:"get-all-component-nodes"},"Get all component nodes"),(0,r.kt)("p",null,"This pinpoints all component nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let childComponentDEs =\n    fixture.debugElement.queryAll(By.directive(ChildComponent));\n")),(0,r.kt)("h3",{id:"check-if-elements-are-correct"},"Check if elements are correct"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"expect(\n    childComponentDEs[0]\n    .componentInstance\n    .element\n    .property\n    ).toEqual('Expected Value');\n")))}u.isMDXComponent=!0}}]);