(self.webpackChunktest_site=self.webpackChunktest_site||[]).push([[308],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(n),b=i,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||o;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8819:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a=["components"],u={sidebar_position:9},s="Interact with Input Boxes",c={unversionedId:"input-boxes",id:"input-boxes",isDocsHomePage:!1,title:"Interact with Input Boxes",description:"Raising events through interactions with buttons/input boxes/etc. is something that can be done in shallow as well as in deep integration tests.",source:"@site/docs/input-boxes.md",sourceDirName:".",slug:"/input-boxes",permalink:"/angularUnitTesting/docs/input-boxes",editUrl:"https://github.com/natalyjazzviolin/angularUnitTesting/blob/main/docs/input-boxes.md",version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Detect Events",permalink:"/angularUnitTesting/docs/trigger-event"},next:{title:"Overview",permalink:"/angularUnitTesting/docs/Routing/Overview"}},l=[],p={toc:l};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interact-with-input-boxes"},"Interact with Input Boxes"),(0,o.kt)("p",null,"Raising events through interactions with buttons/input boxes/etc. is something that can be done in shallow as well as in deep integration tests."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Within describe funciton\nit('should add a new object to the list when th add button is clicked', () => {\n    mockService.getData.and.returnValues(of(DATA));\n    // Calls ngOnInit(); input changes will not\n    // be detected without this\n    fixture.detectChanges();\n    const name = \"Django Reinhardt\";\n    mockService.addObject.and.returnValue(of({id:5, name: name, instrument: 'guitar'}));\n    // By.css('input') works assuming there is only one input element\n    const inputElement =\n        fixture\n        .debugElement\n        .query(By.css('input'))\n        .nativeElement;\n    const addButton =\n        fixture\n        .debugElement\n        .queryAll(By.css('button'))[0];\n\n    inputElement.value = name;\n    // We only need the debugElement because we're using triggerEventHandler\n    // Pass in null for the event obj because it doesn't matter\n    addButton.trigerEventHandler('click', null);\n\n    fixture.detectChanges();\n\n    // Check that the object name has been updated in the HTML ul\n    const objText =\n        fixture\n        .debugElement\n        .query(By.css('ul'))\n        .nativeElement\n        .textContent;\n\n    expect(objText).toContain(name);\n\n})\n")))}d.isMDXComponent=!0}}]);